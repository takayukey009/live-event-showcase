"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/BackgroundAnimation.tsx":
/*!************************************************!*\
  !*** ./src/components/BackgroundAnimation.tsx ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ BackgroundAnimation; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three/examples/jsm/postprocessing/EffectComposer */ \"(app-pages-browser)/./node_modules/three/examples/jsm/postprocessing/EffectComposer.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three/examples/jsm/postprocessing/RenderPass */ \"(app-pages-browser)/./node_modules/three/examples/jsm/postprocessing/RenderPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_UnrealBloomPass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three/examples/jsm/postprocessing/UnrealBloomPass */ \"(app-pages-browser)/./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js\");\n/* harmony import */ var three_examples_jsm_postprocessing_ShaderPass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three/examples/jsm/postprocessing/ShaderPass */ \"(app-pages-browser)/./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nfunction BackgroundAnimation() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            powerPreference: \"high-performance\"\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)) // Limit for performance\n        ;\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.5;\n        containerRef.current.appendChild(renderer.domElement);\n        // Camera position\n        camera.position.z = 20;\n        // Theme colors\n        const themeColors = {\n            primary: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x0a1929),\n            secondary: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x0d47a1),\n            accent: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x2196f3),\n            highlight: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x64b5f6),\n            glow: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x90caf9)\n        };\n        // Background color\n        scene.background = themeColors.primary;\n        // Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0x404040, 0.5);\n        scene.add(ambientLight);\n        // Main light source in top right corner\n        const mainLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(themeColors.highlight, 2, 100, 1.5);\n        mainLight.position.set(15, 15, 10);\n        scene.add(mainLight);\n        // Add a visible sphere for the light source\n        const lightSphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(0.5, 16, 16), new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n            color: themeColors.highlight\n        }));\n        lightSphere.position.copy(mainLight.position);\n        scene.add(lightSphere);\n        // Secondary lights\n        const secondaryLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(themeColors.accent, 1, 50, 1);\n        secondaryLight.position.set(-10, -5, 5);\n        scene.add(secondaryLight);\n        // Add after scene creation but before creating materials\n        // Create an environment map for better reflections\n        const pmremGenerator = new three__WEBPACK_IMPORTED_MODULE_3__.PMREMGenerator(renderer);\n        pmremGenerator.compileEquirectangularShader();\n        // Create a simple environment map\n        const cubeRenderTarget = pmremGenerator.fromScene(new three__WEBPACK_IMPORTED_MODULE_2__.Scene());\n        const envMap = cubeRenderTarget.texture;\n        // Create triangles\n        const triangles = [];\n        const lines = [];\n        const triangleCount = 30;\n        // Enhanced material with reflections\n        const triangleMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhysicalMaterial({\n            color: themeColors.secondary,\n            metalness: 0.9,\n            roughness: 0.1,\n            transparent: true,\n            opacity: 0.8,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n            envMapIntensity: 1,\n            clearcoat: 1.0,\n            clearcoatRoughness: 0.1,\n            emissive: new three__WEBPACK_IMPORTED_MODULE_2__.Color(themeColors.secondary).multiplyScalar(0.1),\n            emissiveIntensity: 0.1\n        });\n        // Set the environment map for all materials\n        triangleMaterial.envMap = envMap;\n        // Create triangular shapes\n        for(let i = 0; i < triangleCount; i++){\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.TetrahedronGeometry(Math.random() * 1.0 + 1.0, 0);\n            const triangle = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, triangleMaterial.clone());\n            // Random starting positions\n            triangle.position.x = Math.random() * 40 - 20;\n            triangle.position.y = Math.random() * 40 - 20;\n            triangle.position.z = Math.random() * 10 - 5;\n            // Random rotation\n            triangle.rotation.x = Math.random() * Math.PI;\n            triangle.rotation.y = Math.random() * Math.PI;\n            triangle.velocity = {\n                y: -Math.random() * 0.03 - 0.01,\n                rotX: Math.random() * 0.01 - 0.005,\n                rotY: Math.random() * 0.01 - 0.005,\n                rotZ: Math.random() * 0.01 - 0.005\n            };\n            // Randomize material properties slightly for variety\n            const material = triangle.material;\n            material.color.set(new three__WEBPACK_IMPORTED_MODULE_2__.Color(themeColors.secondary).lerp(themeColors.accent, Math.random() * 0.5));\n            material.metalness = 0.7 + Math.random() * 0.3;\n            material.roughness = 0.05 + Math.random() * 0.15;\n            scene.add(triangle);\n            triangles.push(triangle);\n        }\n        // Create long lines with enhanced properties\n        const lineMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n            color: themeColors.accent,\n            transparent: true,\n            opacity: 0.4,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.DoubleSide,\n            shininess: 100,\n            flatShading: true\n        });\n        for(let i = 0; i < 15; i++){\n            // Create a plane geometry instead of a line for better visual effects\n            const lineLength = window.innerHeight;\n            const lineWidth = 0.05 + Math.random() * 0.1;\n            const lineGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(lineWidth, lineLength, 1, 10);\n            const line = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(lineGeometry, lineMaterial.clone());\n            line.position.x = Math.random() * 40 - 20;\n            line.position.y = 0 // Center vertically\n            ;\n            line.position.z = Math.random() * 10 - 5;\n            // Random initial rotation\n            line.rotation.x = Math.random() * Math.PI * 0.1;\n            line.rotation.z = Math.random() * Math.PI * 0.25 // Slight angle\n            ;\n            line.velocity = {\n                y: -Math.random() * 0.02 - 0.01,\n                rotX: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1),\n                rotY: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1),\n                rotZ: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1)\n            };\n            line.flareProperties = {\n                active: false,\n                progress: 0,\n                duration: 2 + Math.random() * 3,\n                nextFlareTime: Math.random() * 10\n            };\n            line.material.color.set(new three__WEBPACK_IMPORTED_MODULE_2__.Color(themeColors.accent).lerp(themeColors.highlight, Math.random() * 0.5));\n            scene.add(line);\n            lines.push(line);\n        }\n        // Post-processing for bloom and glare effects\n        const composer = new three_examples_jsm_postprocessing_EffectComposer__WEBPACK_IMPORTED_MODULE_4__.EffectComposer(renderer);\n        const renderPass = new three_examples_jsm_postprocessing_RenderPass__WEBPACK_IMPORTED_MODULE_5__.RenderPass(scene, camera);\n        composer.addPass(renderPass);\n        // Bloom effect\n        const bloomPass = new three_examples_jsm_postprocessing_UnrealBloomPass__WEBPACK_IMPORTED_MODULE_6__.UnrealBloomPass(new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(window.innerWidth, window.innerHeight), 0.6, 0.4, 0.7);\n        composer.addPass(bloomPass);\n        // Custom glare shader with improved smoothing\n        const glareShader = {\n            uniforms: {\n                tDiffuse: {\n                    value: null\n                },\n                lightPosition: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(15, 15, 10)\n                },\n                glareIntensity: {\n                    value: 0.4\n                },\n                time: {\n                    value: 0\n                }\n            },\n            vertexShader: \"\\n        varying vec2 vUv;\\n        void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n        }\\n      \",\n            fragmentShader: \"\\n        uniform sampler2D tDiffuse;\\n        uniform vec3 lightPosition;\\n        uniform float glareIntensity;\\n        uniform float time;\\n        varying vec2 vUv;\\n        \\n        void main() {\\n          vec4 texel = texture2D(tDiffuse, vUv);\\n          \\n          // Improved glare effect with smoother transition\\n          float brightness = dot(texel.rgb, vec3(0.299, 0.587, 0.114));\\n          \\n          // Smooth step for more gradual transition\\n          float glareAmount = smoothstep(0.5, 0.9, brightness) * glareIntensity;\\n          \\n          // Add slight time variation to prevent static glare\\n          glareAmount *= (0.9 + 0.1 * sin(time * 0.5));\\n          \\n          // Add glare with blue tint\\n          texel.rgb += vec3(0.5, 0.7, 1.0) * glareAmount;\\n          \\n          gl_FragColor = texel;\\n        }\\n      \"\n        };\n        const glarePass = new three_examples_jsm_postprocessing_ShaderPass__WEBPACK_IMPORTED_MODULE_7__.ShaderPass(glareShader);\n        composer.addPass(glarePass);\n        // Animation loop\n        const clock = new three__WEBPACK_IMPORTED_MODULE_2__.Clock();\n        const animate = ()=>{\n            requestAnimationFrame(animate);\n            const elapsedTime = clock.getElapsedTime();\n            // Slightly move the main light for dynamic lighting\n            mainLight.position.x = 15 + Math.sin(elapsedTime * 0.2) * 2;\n            mainLight.position.y = 15 + Math.cos(elapsedTime * 0.3) * 2;\n            lightSphere.position.copy(mainLight.position);\n            // Update glare shader with current light position\n            glarePass.uniforms.lightPosition.value.copy(mainLight.position);\n            // Update time uniform for glare shader\n            glarePass.uniforms.time.value = elapsedTime;\n            // Animate triangles\n            triangles.forEach((triangle, index)=>{\n                // Move down\n                triangle.position.y += triangle.velocity.y;\n                // Rotate (tumbling effect)\n                triangle.rotation.x += triangle.velocity.rotX;\n                triangle.rotation.y += triangle.velocity.rotY;\n                triangle.rotation.z += triangle.velocity.rotZ;\n                // Get the material\n                const material = triangle.material;\n                // IMPROVED: Calculate face normals properly for tetrahedron\n                // A tetrahedron has 4 faces, we'll check all of them against the light\n                const geometry = triangle.geometry;\n                const position = geometry.attributes.position;\n                const normalAttribute = geometry.attributes.normal;\n                // Initialize variables to track the best light alignment\n                let bestAlignment = -1;\n                // Check each face's normal against the light direction\n                for(let face = 0; face < normalAttribute.count; face++){\n                    // Get the normal for this vertex\n                    const nx = normalAttribute.getX(face);\n                    const ny = normalAttribute.getY(face);\n                    const nz = normalAttribute.getZ(face);\n                    // Create a normal vector and apply the triangle's rotation\n                    const normal = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(nx, ny, nz).applyQuaternion(triangle.quaternion);\n                    // Calculate light direction from this face to both lights\n                    const mainLightDir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().subVectors(mainLight.position, triangle.position).normalize();\n                    const secondaryLightDir = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().subVectors(secondaryLight.position, triangle.position).normalize();\n                    // Calculate alignment with both lights\n                    const mainAlignment = Math.max(0, normal.dot(mainLightDir));\n                    const secondaryAlignment = Math.max(0, normal.dot(secondaryLightDir) * 0.5) // Secondary light has less effect\n                    ;\n                    // Combined alignment from both lights\n                    const combinedAlignment = Math.min(1, mainAlignment + secondaryAlignment);\n                    // Keep track of the best alignment for any face\n                    if (combinedAlignment > bestAlignment) {\n                        bestAlignment = combinedAlignment;\n                    }\n                }\n                // IMPROVED: Gradual emissive intensity based on alignment\n                // This prevents sudden changes from bright to dark\n                const minEmissive = 0.05 // Minimum emissive to prevent complete darkness\n                ;\n                const emissiveIntensity = minEmissive + bestAlignment * 0.6;\n                // Set emissive color based on alignment (gradual transition)\n                const emissiveColor = new three__WEBPACK_IMPORTED_MODULE_2__.Color(themeColors.glow);\n                // Always have some minimal emissive to prevent complete darkness\n                material.emissive.set(emissiveColor);\n                material.emissiveIntensity = emissiveIntensity;\n                // IMPROVED: Adjust other material properties based on alignment for better visual effect\n                material.roughness = Math.max(0.05, 0.2 - bestAlignment * 0.15);\n                // Reset position when out of view\n                if (triangle.position.y < -20) {\n                    triangle.position.y = 20;\n                    triangle.position.x = Math.random() * 40 - 20;\n                }\n            });\n            // Animate lines\n            lines.forEach((line, index)=>{\n                // Move down\n                line.position.y += line.velocity.y;\n                // Apply consistent rotation\n                line.rotation.x += line.velocity.rotX;\n                line.rotation.y += line.velocity.rotY;\n                line.rotation.z += line.velocity.rotZ;\n                // Handle flare effects\n                const flareProps = line.flareProperties;\n                const material = line.material;\n                if (flareProps.active) {\n                    // Update flare progress\n                    flareProps.progress += 1 / (60 * flareProps.duration);\n                    if (flareProps.progress >= 1) {\n                        // End flare\n                        flareProps.active = false;\n                        flareProps.progress = 0;\n                        flareProps.nextFlareTime = 5 + Math.random() * 10;\n                        material.emissive = new three__WEBPACK_IMPORTED_MODULE_2__.Color(0x000000);\n                        material.emissiveIntensity = 0;\n                    } else {\n                        // Calculate flare intensity (peak in the middle)\n                        const intensity = Math.sin(flareProps.progress * Math.PI);\n                        // Set emissive properties for the flare\n                        material.emissive = themeColors.glow;\n                        material.emissiveIntensity = intensity * 0.8;\n                    }\n                } else {\n                    // Count down to next flare\n                    flareProps.nextFlareTime -= 1 / 60;\n                    if (flareProps.nextFlareTime <= 0) {\n                        // Start a new flare\n                        flareProps.active = true;\n                        flareProps.progress = 0;\n                    }\n                }\n                // Reset position when the line moves completely off-screen\n                if (line.position.y < -window.innerHeight) {\n                    // Remove this line\n                    scene.remove(line);\n                    line.geometry.dispose();\n                    line.material.dispose();\n                    // Create a new line to replace it\n                    const lineLength = window.innerHeight;\n                    const lineWidth = 0.05 + Math.random() * 0.1;\n                    const lineGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(lineWidth, lineLength, 1, 10);\n                    const newMaterial = lineMaterial.clone();\n                    newMaterial.color.set(new three__WEBPACK_IMPORTED_MODULE_2__.Color(themeColors.accent).lerp(themeColors.highlight, Math.random() * 0.5));\n                    const newLine = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(lineGeometry, newMaterial);\n                    newLine.position.x = Math.random() * 40 - 20;\n                    newLine.position.y = window.innerHeight / 2;\n                    newLine.position.z = Math.random() * 10 - 5;\n                    // Random initial rotation\n                    newLine.rotation.x = Math.random() * Math.PI * 0.1;\n                    newLine.rotation.z = Math.random() * Math.PI * 0.25;\n                    newLine.velocity = {\n                        y: -Math.random() * 0.02 - 0.01,\n                        rotX: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1),\n                        rotY: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1),\n                        rotZ: (Math.random() * 0.002 - 0.001) * (Math.random() > 0.5 ? 1 : -1)\n                    };\n                    newLine.flareProperties = {\n                        active: false,\n                        progress: 0,\n                        duration: 2 + Math.random() * 3,\n                        nextFlareTime: Math.random() * 10\n                    };\n                    scene.add(newLine);\n                    lines[index] = newLine;\n                }\n            });\n            // Render with post-processing\n            composer.render();\n        };\n        animate();\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            composer.setSize(window.innerWidth, window.innerHeight);\n            bloomPass.resolution.set(window.innerWidth, window.innerHeight);\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // Cleanup\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            if (containerRef.current) {\n                containerRef.current.removeChild(renderer.domElement);\n            }\n            // Dispose geometries and materials\n            triangles.forEach((triangle)=>{\n                triangle.geometry.dispose();\n                triangle.material.dispose();\n            });\n            lines.forEach((line)=>{\n                line.geometry.dispose();\n                line.material.dispose();\n            });\n            composer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full\",\n        ref: containerRef\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\takay\\\\CascadeProjects\\\\live-event-showcase\\\\src\\\\components\\\\BackgroundAnimation.tsx\",\n        lineNumber: 464,\n        columnNumber: 5\n    }, this);\n}\n_s(BackgroundAnimation, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = BackgroundAnimation;\nvar _c;\n$RefreshReg$(_c, \"BackgroundAnimation\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/BackgroundAnimation.tsx\n"));

/***/ })

});